//初始化git仓储
git init

//配置全局作者和邮箱，备份的时候可以存储是谁备份的当前代码
git config --global user.name "名字"
git config --global user.email "123@qq.xom"

// 存储代码到git的操作
    1、git add 文件路径      ----    放进过过渡层
       git add .           ----    把所有更改的文件放进过渡层
    2、git commit -m "写入提示信息，告诉以后访问的人改变了什么"   ----把过渡层的所有文件放进git仓库
       git commit --all -m "说明"       ----    把所有修改的文件放到git仓库中

// 查看代码有没有放到git中
git status

// 查看提交日志(作者，邮箱，日期)
git log             ----   查看所有日志(详细)
git log --oneline   ----   在一行显示一项日志（简洁）

// 版本回退（注：回退之后，log命令只能查看回退到的版本之前的版本，实际上回退到的版本之后的版本也都还在）
git reset --hard head~0    ----   回退成上一次保存的文件（0表示最近一次，1是上上次）
git reset --hard [版本号]

// 查看所有版本切换日志
git reflog

// 创建分支（主支为master）
git branch 分支名

git branch  ----查看所有分支
git branch -d 分支名  ----  删除当前分支以外的某一个分支
git checkout 分支名   ----  切换到某分支
git merge 分支名    ----   把指定分支与当前分支合并（注：合并时会遇到 同时改变的情况，有冲突不能自动合并，此时需要手动处理再提交）



--------------------------------GitHub服务器-----------------------------------------
 https地址上传

// 把当前分支的代码提交到GitHub服务器仓库
git push [地址] 服务器上分支名   ----   地址为GitHub仓库的HTTPS,分支名是服务器上的分支名，上传时还要用户名和密码

// 把服务器上的代码拿到本地仓库的当前分支
git pull [地址] 分支名

// 把服务器的内容克隆到本地
git clone [地址]    ----    克隆方法会把当前的内容覆盖掉


  SSH地址上传

// 可以不用用户名和密码上传，但需要公钥和私钥
ssh-keygen -t rsa -C "123@qq.com"    ----   生成ssh公钥和私钥

git push [SSH地址] 分支名    ----  ssh上传代码

// 可以在当前的本地仓库把服务器仓库地址设置为变量，之后的push和pull都可以用变量解决
git remote add 变量名 [地址]




/* （可以在分支名前添加-u参数，把本地当前分支与服务器上的分支和地址相关联，之后也可以省略分支名）*/
git push [地址] -u 分支名
git pull [地址] -u 分支名
之后
git push
git pull





处理冲突时，先把github上的版本pull下来，把冲突解决了再push上去